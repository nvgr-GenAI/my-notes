"use strict";(self.webpackChunkmy_notes=self.webpackChunkmy_notes||[]).push([[540],{1941:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"templates/feature-development-pattern","title":"Feature Development Pattern","description":"This document describes the pattern used by the software engineer and Copilot while working on a feature.","source":"@site/docs/templates/feature-development-pattern.md","sourceDirName":"templates","slug":"/templates/feature-development-pattern","permalink":"/my-notes/docs/templates/feature-development-pattern","draft":false,"unlisted":false,"editUrl":"https://github.com/nvgr-GenAI/my-notes/edit/main/docs/templates/feature-development-pattern.md","tags":[],"version":"current","frontMatter":{}}');var s=i(4848),l=i(8453);const o={},r="Feature Development Pattern",a={},c=[{value:"Context",id:"context",level:2},{value:"Documentation",id:"documentation",level:2},{value:"Software Developer and Copilot Working Together",id:"software-developer-and-copilot-working-together",level:2},{value:"Roles and Responsibilities",id:"roles-and-responsibilities",level:2},{value:"Software Engineer&#39;s Role",id:"software-engineers-role",level:3},{value:"Copilot&#39;s Role",id:"copilots-role",level:3},{value:"General Pattern",id:"general-pattern",level:2},{value:"Refining the Intro File",id:"refining-the-intro-file",level:2},{value:"Post Milestone Completion",id:"post-milestone-completion",level:2},{value:"Post Feature Completion",id:"post-feature-completion",level:2},{value:"Commit Messages",id:"commit-messages",level:2},{value:"Review and Approval Process",id:"review-and-approval-process",level:2},{value:"Documentation Updates",id:"documentation-updates",level:2},{value:"Implementation Phase",id:"implementation-phase",level:2},{value:"Communication and Collaboration",id:"communication-and-collaboration",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Commit Best Practices",id:"commit-best-practices",level:3},{value:"Pull Request Best Practices",id:"pull-request-best-practices",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Folder Structure Best Practices",id:"folder-structure-best-practices",level:3},{value:"Pre-Commit Hooks and Best Practices",id:"pre-commit-hooks-and-best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"feature-development-pattern",children:"Feature Development Pattern"})}),"\n",(0,s.jsx)(n.p,{children:"This document describes the pattern used by the software engineer and Copilot while working on a feature."}),"\n",(0,s.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,s.jsx)(n.p,{children:"A software developer is going to be working in concert with Copilot to implement a feature in this software project."}),"\n",(0,s.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Base documentation folder for feature development: ",(0,s.jsx)(n.code,{children:".copilot/feat"})]}),"\n",(0,s.jsxs)(n.li,{children:["Dependencies folder: ",(0,s.jsx)(n.code,{children:".copilot/deps"})]}),"\n",(0,s.jsx)(n.li,{children:"Documentation format: Markdown"}),"\n",(0,s.jsxs)(n.li,{children:["Key documents:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lessons-learned.md"}),": Captures key lessons learned during feature implementation. It is where we will store new information which is discovered during the course of implementation. Lessons learned should only include new lessons."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".copilot/deps/"}),": Contains documentation on dependencies, integrations, and interfaces."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Feature documentation structure: ",(0,s.jsx)(n.code,{children:".copilot/feat/US[ticket-number]-[feature-name]/"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"intro.md"}),": Feature introduction and context.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create place holder sections like Introduction, Goal, Context, Implementation Guidelines, Dependcies\nDetailed implementation milestones."}),"\n",(0,s.jsx)(n.li,{children:"Each milestone will include a section describing the expected outcome."}),"\n",(0,s.jsx)(n.li,{children:"The implementation plan is high level."}),"\n",(0,s.jsx)(n.li,{children:"The implementation plan should not contain code, technical specifications, or directory structures. Prose only."}),"\n",(0,s.jsx)(n.li,{children:"Each implementation milestone should include only a single discrete testable change. Break complex implementations into multiple smaller milestones, where each milestone can be independently verified."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"implementation-progress.md"}),": Track progress of implementation.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Checklists make the progress report easy to understand."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"software-developer-and-copilot-working-together",children:"Software Developer and Copilot Working Together"}),"\n",(0,s.jsx)(n.p,{children:"The feature will be implemented by Copilot with direction and feedback given by the software engineer. Focus on understanding the work to be done before getting to the code."}),"\n",(0,s.jsx)(n.h2,{id:"roles-and-responsibilities",children:"Roles and Responsibilities"}),"\n",(0,s.jsx)(n.h3,{id:"software-engineers-role",children:"Software Engineer's Role"}),"\n",(0,s.jsx)(n.p,{children:"The software engineer plays an important role in the implementation pattern. The software engineer:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provides feedback on changes made by Copilot."}),"\n",(0,s.jsx)(n.li,{children:"Validates milestone completion."}),"\n",(0,s.jsx)(n.li,{children:"Provides context and makes git commits."}),"\n",(0,s.jsx)(n.li,{children:"Gets documentation for Copilot."}),"\n",(0,s.jsx)(n.li,{children:"Decides when to continue to the next activity."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"copilots-role",children:"Copilot's Role"}),"\n",(0,s.jsx)(n.p,{children:"Copilot manages the code. This pattern is single writer and Copilot is the writer."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Writes the code and keeps documents up to date."}),"\n",(0,s.jsx)(n.li,{children:"Asks the software engineer for input."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"general-pattern",children:"General Pattern"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Copilot creates the docs for the new feature."}),"\n",(0,s.jsx)(n.li,{children:"The software engineer writes the intro file."}),"\n",(0,s.jsx)(n.li,{children:"Copilot checks its understanding of the intro file with the software engineer until consensus is reached."}),"\n",(0,s.jsx)(n.li,{children:"Copilot creates an implementation plan document."}),"\n",(0,s.jsx)(n.li,{children:"The software engineer reviews the implementation plan and provides feedback."}),"\n",(0,s.jsx)(n.li,{children:"The software engineer and Copilot work together to refine the implementation plan until the software engineer is satisfied with the plan."}),"\n",(0,s.jsx)(n.li,{children:"Copilot waits for explicit approval from the software engineer before starting the implementation of any milestone."}),"\n",(0,s.jsx)(n.li,{children:"Copilot begins implementation work, starting with the first milestone."}),"\n",(0,s.jsx)(n.li,{children:"Copilot runs builds and tests to verify the correctness of its changes."}),"\n",(0,s.jsx)(n.li,{children:"After Copilot finishes implementation, the software engineer checks the code and application."}),"\n",(0,s.jsx)(n.li,{children:"The software engineer provides feedback to Copilot."}),"\n",(0,s.jsx)(n.li,{children:"Copilot makes updates to the implementation based on the software engineer's feedback."}),"\n",(0,s.jsx)(n.li,{children:"The software engineer and Copilot continue the milestone refinement cycle until the software engineer is satisfied."}),"\n",(0,s.jsx)(n.li,{children:"The milestone is considered complete and Copilot updates the implementation progress and lessons learned docs."}),"\n",(0,s.jsx)(n.li,{children:"At the software engineer's direction, Copilot begins work on the next milestone."}),"\n",(0,s.jsx)(n.li,{children:"This pattern continues until all milestones are complete."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"refining-the-intro-file",children:"Refining the Intro File"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["After the initial writing of the ",(0,s.jsx)(n.code,{children:"intro.md"})," file, the software engineer can take help from Copilot to refine the file with more technical details."]}),"\n",(0,s.jsx)(n.li,{children:"This includes adding implementation guidelines, dependencies, and any other relevant technical context."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"post-milestone-completion",children:"Post Milestone Completion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["After each milestone completion, Copilot should ask for user approval to:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Commit the changes."}),"\n",(0,s.jsx)(n.li,{children:"Proceed to the next milestone."}),"\n",(0,s.jsx)(n.li,{children:"Create a pull request template."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"The software engineer will make the final decision on the next action."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"post-feature-completion",children:"Post Feature Completion"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Update project-level docs such as the README file."}),"\n",(0,s.jsx)(n.li,{children:"Create a pull request content file in the feature directory if requested."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"commit-messages",children:"Commit Messages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use Conventional Commits for all commit messages."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"review-and-approval-process",children:"Review and Approval Process"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Feedback Loop: Thorough review of the implementation plan by the software engineer."}),"\n",(0,s.jsx)(n.li,{children:"Approval Confirmation: Explicit confirmation before starting any milestone."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"documentation-updates",children:"Documentation Updates"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure all relevant documentation is up-to-date before starting implementation."}),"\n",(0,s.jsxs)(n.li,{children:["Regularly update the ",(0,s.jsx)(n.code,{children:"implementation-progress.md"})," document."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-phase",children:"Implementation Phase"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Milestone Verification: Run builds and tests to verify changes."}),"\n",(0,s.jsx)(n.li,{children:"Feedback Integration: Promptly integrate feedback from the software engineer."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"communication-and-collaboration",children:"Communication and Collaboration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Regular Check-ins: Discuss progress, challenges, and next steps."}),"\n",(0,s.jsx)(n.li,{children:"Clear Communication: Promptly seek feedback or approval."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"commit-best-practices",children:"Commit Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Atomic Commits: Each commit represents a single logical change."}),"\n",(0,s.jsx)(n.li,{children:'Descriptive Commit Messages: Explain the "why" behind the change.'}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pull-request-best-practices",children:"Pull Request Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Small and Focused PRs: Focus on a single feature or bug fix."}),"\n",(0,s.jsx)(n.li,{children:"Template Usage: Use a consistent pull request template."}),"\n",(0,s.jsx)(n.li,{children:"Review Checklist: Verify code quality, tests, and adherence to standards."}),"\n",(0,s.jsx)(n.li,{children:"Link Issues: Link the pull request to relevant issues or tasks."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"File Names: Use kebab-case or snake_case for file names."}),"\n",(0,s.jsx)(n.li,{children:"Variable and Function Names: Follow language-specific naming conventions."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"folder-structure-best-practices",children:"Folder Structure Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Feature-Based Organization: Group files by feature or module."}),"\n",(0,s.jsx)(n.li,{children:"Separation of Concerns: Separate components, styles, and utilities."}),"\n",(0,s.jsxs)(n.li,{children:["Static Assets: Use a ",(0,s.jsx)(n.code,{children:"static/"})," or ",(0,s.jsx)(n.code,{children:"assets/"})," folder for images and fonts."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pre-commit-hooks-and-best-practices",children:"Pre-Commit Hooks and Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Adhere to pre-commit hooks defined in the codebase."}),"\n",(0,s.jsx)(n.li,{children:"Follow language-specific best practices to maintain code quality."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(6540);const s={},l=t.createContext(s);function o(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);